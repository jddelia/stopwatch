{"version":3,"sources":["components/Navbar.js","components/Stopwatch.js","components/Control.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","react_default","a","createElement","className","href","Stopwatch","props","status","min2","min1","sec2","sec1","Control","id","onClick","btnPosition","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","totalSecs","timer","bind","assertThisInitialized","setState","secTimer","setInterval","clearInterval","x","y","Math","floor","secs","divmod","_this2","components_Navbar","components_Stopwatch","components_Control","handleClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c7a3a76a.chunk.js","sourcesContent":["import React from 'react';\n\nconst Navbar = () => {\n  return (\n    <nav className=\"navbar\">\n      <h3>Stopwatch</h3>\n      <a href=\"http://www.github.com/jddelia\">Github</a>\n      <a href=\"http://www.jdeliablog.com\">JDelia</a>\n    </nav>\n  );\n}\n\nexport default Navbar;\n","import React from 'react';\n\nconst Stopwatch = (props) => {\n  return (\n    <div className=\"stopwatch-container\">\n      <div className=\"stopwatch-display\">\n        <div className=\"time-block\">\n          <h4>{props.status.min2}</h4>\n        </div>\n\n        <div className=\"time-block\">\n          <h4>{props.status.min1}</h4>\n        </div>\n\n        <div className=\"colon-container\">\n          <div className=\"colon-1\"></div>\n          <div className=\"colon-2\"></div>\n        </div>\n\n        <div className=\"time-block\">\n          <h4>{props.status.sec2}</h4>\n        </div>\n\n        <div className=\"time-block\">\n          <h4>{props.status.sec1}</h4>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Stopwatch;\n","import React from 'react';\n\nconst Control = (props) => {\n  return (\n    <div className=\"control-container\">\n      <a id=\"ctrl-btn\" onClick={props.onClick}>\n        {props.status.btnPosition}\n      </a>\n    </div>\n  );\n}\n\nexport default Control;\n","import React, { Component } from 'react';\nimport Navbar from './components/Navbar';\nimport Stopwatch from './components/Stopwatch';\nimport Control from './components/Control'\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      btnPosition: 'START',\n      min2: 0,\n      min1: 0,\n      sec2: 0,\n      sec1: 0,\n      totalSecs: 0,\n      timer: null\n    }\n    this.timer = this.timer.bind(this)\n  }\n\n  handleClick() {\n    let btnPosition = this.state.btnPosition === 'START' ? (\n      'STOP') : ('START')\n\n    this.setState({\n      btnPosition: btnPosition\n    });\n\n    if (this.state.timer == null) {\n      let secTimer = setInterval(this.timer, 1000)\n      this.setState({\n        timer: secTimer\n      });\n    } else if (this.state.timer) {\n      clearInterval(this.state.timer);\n      this.setState({\n        min2: 0,\n        min1: 0,\n        sec2: 0,\n        sec1: 0,\n        totalSecs: 0,\n        timer: null\n      })\n    }\n  }\n\n  divmod(x, y) {\n    let newX = x;\n    let newY = y;\n    newX = Math.floor(x / y);\n    newY = x % y;\n    return [newX, newY];\n  }\n\n  timer() {\n    this.setState({\n      totalSecs: this.state.totalSecs + 1\n    });\n\n    if (this.state.totalSecs >= 3600) {\n      this.setState({\n        totalSecs: 0\n      });\n      return;\n    }\n\n    let min2, min1, sec2, sec1;\n    let secs = this.divmod(this.state.totalSecs, 60);\n    min1 = secs[0];\n    min2 = 0;\n    sec1 = secs[1];\n    sec2 = 0;\n\n    while (sec1 >= 10) {\n      sec2 += 1;\n      sec1 -= 10;\n    }\n\n    while (min1 >= 10) {\n      min2 += 1;\n      min1 -= 10;\n    }\n\n    this.setState({\n      min2: min2,\n      min1: min1,\n      sec2: sec2,\n      sec1: sec1\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Navbar />\n        <Stopwatch status={this.state}/>\n        <Control status={this.state} onClick={() => this.handleClick()} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}